"""
REST API (Representational State Transfer API) to styl architektoniczny uÅ¼ywany
do tworzenia interfejsÃ³w komunikacji miÄ™dzy aplikacjami za pomocÄ… protokoÅ‚u HTTP.
REST API pozwala na wysyÅ‚anie Å¼Ä…daÅ„ i odbieranie odpowiedzi w formacie JSON lub XML,
co umoÅ¼liwia Å‚atwÄ… wymianÄ™ danych miÄ™dzy systemami.
ğŸ”¹ Jak dziaÅ‚a REST API?
REST API opiera siÄ™ na operacjach CRUD (Create, Read, Update, Delete),
ktÃ³re sÄ… realizowane przez metody HTTP:
GET â€“ pobiera dane z serwera.
POST â€“ tworzy nowy zasÃ³b na serwerze.
PUT â€“ aktualizuje istniejÄ…cy zasÃ³b.
DELETE â€“ usuwa zasÃ³b.

Oto podstawowe metody HTTP, ktÃ³re sÄ… uÅ¼ywane w komunikacji z serwerem:
ğŸ”¹ GET â€“ Pobiera zasoby z serwera (np. stronÄ™ internetowÄ…, dane z API).
ğŸ”¹ POST â€“ Tworzy nowy zasÃ³b na serwerze (np. dodawanie uÅ¼ytkownika, wysyÅ‚anie formularza).
ğŸ”¹ PUT â€“ Aktualizuje istniejÄ…cy zasÃ³b lub tworzy nowy, jeÅ›li nie istnieje.
ğŸ”¹ PATCH â€“ CzÄ™Å›ciowa aktualizacja zasobu (np. zmiana jednego pola w bazie danych).
ğŸ”¹ DELETE â€“ Usuwa zasÃ³b z serwera.
ğŸ”¹ OPTIONS â€“ Sprawdza dostÄ™pne metody dla danego zasobu (np. jakie operacje sÄ… dozwolone).
ğŸ”¹ HEAD â€“ Podobny do GET, ale pobiera tylko nagÅ‚Ã³wki, bez zawartoÅ›ci odpowiedzi.
ğŸ”¹ TRACE â€“ Testuje Å›cieÅ¼kÄ™ Å¼Ä…dania i zwraca informacje o przebytej trasie.
ğŸ”¹ CONNECT â€“ Tworzy tunel do serwera, czÄ™sto uÅ¼ywane dla poÅ‚Ä…czeÅ„ HTTPS.
"""
from typing import List

# import requests
#
# url = "https://v2.api.raporty.pse.pl/app/home"
# response = requests.options(url)
#
# # WyÅ›wietlenie kaÅ¼dego nagÅ‚Ã³wka w osobnej linii
# for key, value in response.headers.items():
#     print(f"{key}: {value}")



# import requests
#
# url = "http://api.open-notify.org/astros.json"
# response = requests.options(url)
#
# # WyÅ›wietlenie kaÅ¼dego nagÅ‚Ã³wka w osobnej linii
# for key, value in response.headers.items():
#     print(f"{key}: {value}")



# import requests
#
# url = "http://api.open-notify.org/astros.json"
# response = requests.get(url)
#
# # Pobranie danych JSON
# data = response.json()
#
# # WyÅ›wietlenie kaÅ¼dego elementu w oddzielnej linii
# for key, value in data.items():
#     print(f"{key}: {value}")


# import requests
#
# url = "http://api.open-notify.org/astros.json"
# response = requests.get(url)
#
# # Pobranie danych JSON
# data = response.json()
#
# # WyÅ›wietlenie kaÅ¼dego klucza i wartoÅ›ci w oddzielnych wierszach
# for key, value in data.items():
#     print(f"{key}:")
#
#     # JeÅ›li wartoÅ›Ä‡ to lista (np. lista astronautÃ³w), iteruj przez niÄ…
#     if isinstance(value, list):
#         for item in value:
#             print(f"  - craft: {item['craft']}")
#             print(f"    name: {item['name']}")
#     else:
#         print(f"  {value}")


import requests

url = "http://api.open-notify.org/astros.json"
response = requests.get(url)
print(response) # zwraca kod odpwoeidzi ze strony 2xx - oki;
# 3xx -przekierowania, warningi;  4xx - beldy zapytania; 5xx bledy serwera
print(response.text)
print(type(response.text))

# trzeba jsona zamienic na slownik

# Pobranie danych JSON
response_data = response.json()
print(type(response_data))
print(response_data)


# astronauts = response.json().get("people", [])
#
# for person in astronauts:
#     print(f"ImiÄ™: {person['name']}, Statek: {person['craft']}")


people_list=response_data['people']
for i in people_list:
    print(i)
print(30*'=')
print (response.json().get("people", []))

print(30*'=')
print ( [person['name'] for person in response.json().get("people", [])])

print(30*'=')
print("\n".join([person['name'] for person in response.json().get("people", [])]))

print(30*'=')
from pydantic import BaseModel # biblioteka ktora pozwala parsowac json na obiekty

class Astros(BaseModel):
    craft: str
    name: str

class AstroData(BaseModel):
    #people: list
    people: List[Astros]
    number: int
    message: str


data =AstroData(**response_data)
print(data)

print (data.number)
print(data.message)
print(30*'=')

for p in data.people:
    print(f'{p.name=}, {p.craft=}')

print(30*'=')

for p in data.people:
    #print(p)
    print(p.__class__.__name__)
    print(f'{p.name} {p.craft}')